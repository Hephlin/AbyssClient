package me.ciruu.abyss.modules.exploit;

import java.util.function.Predicate;
import me.ciruu.abyss.Globals;
import me.ciruu.abyss.enums.Category;
import me.ciruu.abyss.events.network.EventNetworkPostPacketEvent;
import me.ciruu.abyss.modules.Module;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;

public class LiquidInteract
extends Module {
    @EventHandler
    private Listener Field3247 = new Listener<EventNetworkPostPacketEvent>(this::Method3925, 50, new Predicate[0]);

    public LiquidInteract() {
        super("LiquidInteract", "Allows you to place blocks on water.", Category.EXPLOIT, "");
    }

    public boolean getEnable() {
        super.getEnable();
        return false;
    }
    private boolean Method3926(BlockPos blockPos) {
        return Globals.mc.world.getBlockState(blockPos).getBlock() == Blocks.WATER || Globals.mc.world.getBlockState(blockPos).getBlock() == Blocks.LAVA || Globals.mc.world.getBlockState(blockPos).getBlock() == Blocks.FLOWING_LAVA || Globals.mc.world.getBlockState(blockPos).getBlock() == Blocks.FLOWING_WATER;
    }

    private void Method3925(EventNetworkPostPacketEvent eventNetworkPostPacketEvent) {
        if (eventNetworkPostPacketEvent.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) {
            CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock) eventNetworkPostPacketEvent.getPacket();

            if (this.Method3926(packet.getPos()) &&
                    Globals.mc.world.getBlockState(packet.getPos().offset(packet.getDirection())).getBlock() != Blocks.AIR) {

                EnumFacing enumFacing = packet.getDirection().getOpposite();
                float f = packet.getFacingX();
                float f2 = packet.getFacingY();
                float f3 = packet.getFacingZ();

                switch (enumFacing) {
                    case UP: {
                        f2 = 1.0f;
                        packet.position = packet.position.add(0, -1, 0);
                        break;
                    }
                    case DOWN: {
                        f2 = 0.0f;
                        packet.position = packet.position.add(0, -1, 0);
                        break;
                    }
                    case NORTH: {
                        f3 = 1.0f;
                        packet.position = packet.position.add(0, 0, packet.position.getZ() > 0 ? -1 : 1);
                        break;
                    }
                    case SOUTH: {
                        f3 = 0.0f;
                        packet.position = packet.position.add(0, 0, packet.position.getZ() > 0 ? 1 : -1);
                        break;
                    }
                    case WEST: {
                        f = 0.0f;
                        packet.position = packet.position.add(packet.position.getX() > 0 ? -1 : 1, 0, 0);
                        break;
                    }
                    case EAST: {
                        f = 1.0f;
                        packet.position = packet.position.add(packet.position.getX() > 0 ? 1 : -1, 0, 0);
                        break;
                    }
                }

                packet.placedBlockDirection = enumFacing;
                packet.facingX = f;
                packet.facingY = f2;
                packet.facingZ = f3;
            }
        }
    }

}
